name: Main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  CACHE_PREFIX: v0  # Change this to invalidate existing cache.
  DEFAULT_PYTHON: 3.7
  BEAKER_WORKSPACE: ai2/petew-testing

jobs:
  compatibility:
    name: Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python environment
        uses: ./.github/actions/setup-venv
        with:
          python-version: ${{ matrix.python }}
          cache-prefix: ${{ env.CACHE_PREFIX }}

      - name: Setup Beaker
        uses: allenai/setup-beaker@v1.0.0
        with:
          token: ${{ secrets.BEAKER_TOKEN }}
          workspace: ${{ env.BEAKER_WORKSPACE }}

      - name: Check config compatibility
        shell: bash
        run: |
          . .venv/bin/activate
          python -c 'from beaker import Beaker; print(Beaker.from_env().account.name)'

      - name: Clean up
        if: always()
        shell: bash
        run: |
          . .venv/bin/activate
          pip uninstall -y beaker-py

  checks:
    name: ${{ matrix.os }} - python ${{ matrix.python }} - ${{ matrix.task.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    env:
      BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: [3.7]
        task:
          - name: Lint
            run: |
              flake8 .

          - name: Type check
            run: |
              mypy .

          - name: Unit tests
            run: |
              pytest -v --color=yes --durations=10 tests/

          - name: Doc tests
            run: |
              pytest -v --color=yes --doctest-modules beaker/

          - name: Images
            run: |
              cd test_fixtures/docker \
                && docker build --build-arg "COMMIT_SHA=$COMMIT_SHA" -t beaker-py-test . \
                && cd -
              pytest -rP -v --color=yes integration_tests/images_test.py

          - name: Jobs
            run: |
              pytest -rP -v --color=yes integration_tests/jobs_test.py

          - name: Experiments
            run: |
              pytest -rP -v --color=yes integration_tests/experiments_test.py

          - name: Build
            run: |
              python setup.py check
              python setup.py bdist_wheel sdist

          - name: Style
            run: |
              isort --check .
              black --check .

          - name: Docs
            run: |
              cd docs && make html

    steps:
      - uses: actions/checkout@v3

      - name: Determine current commit SHA (pull request)
        if: github.event_name == 'pull_request'
        run: |
          echo "COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Determine current commit SHA (push)
        if: github.event_name != 'pull_request'
        run: |
          echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Setup Python environment
        uses: ./.github/actions/setup-venv
        with:
          python-version: ${{ matrix.python }}
          cache-prefix: ${{ env.CACHE_PREFIX }}

      - name: ${{ matrix.task.name }}
        shell: bash
        run: |
          set -euo pipefail
          . .venv/bin/activate
          ${{ matrix.task.run }}

      - name: Upload package distribution files
        if: matrix.task.name == 'Build'
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: dist

      - name: Clean up
        if: always()
        shell: bash
        run: |
          . .venv/bin/activate
          pip uninstall -y beaker-py

  docker:
    name: Docker
    runs-on: ubuntu-latest
    env:
      image: ghcr.io/allenai/beaker-py
    steps:
      - uses: actions/checkout@v3

      - name: Log in to ghcr.io
        run: |
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin

      - name: Build image
        run: |
          docker build -t "${image}" .

      - name: Test image
        run: |
          docker run \
              --rm \
              --entrypoint python \
              -e BEAKER_TOKEN=${{ secrets.BEAKER_TOKEN }} \
              "${image}" \
              -c "from beaker import Beaker; beaker = Beaker.from_env(); print(beaker.account.whoami())"

      - name: Publish image to container registry
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          docker tag "${image}" "${image}:${TAG}"
          docker push "${image}:${TAG}"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [checks, docker]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v1  # needs v1 for now

      - name: Log in to ghcr.io
        run: |
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Install requirements
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r dev-requirements.txt

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v2
        with:
          name: package
          path: dist

      - name: Generate release notes
        run: |
          python scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Publish package to PyPI
        run: |
          twine upload -u allennlp -p ${{ secrets.PYPI_PASSWORD }} dist/*

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, 'rc') }}
          files: |
            dist/*
